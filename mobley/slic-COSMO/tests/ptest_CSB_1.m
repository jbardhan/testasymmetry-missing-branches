% Path information
clear all
Home = getenv('HOME');
repo_path = sprintf('%s/repos',Home);
dropbox_path = sprintf('%s/Dropbox',Home);
addpath(sprintf('%s/repos/pointbem',Home));
addpath(sprintf('%s/repos/panelbem',Home));
addpath(sprintf('%s/repos/testasymmetry',Home));
addpath(sprintf('%s/repos/testasymmetry/functions',Home));
addpath(sprintf('%s/repos/testasymmetry/mobley',Home));
addpath(sprintf('%s/repos/testasymmetry/mobley/slic-COSMO',Home));
addpath(sprintf('%s/repos/testasymmetry/mobley/slic-COSMO/tests',Home));
addpath(sprintf('%s/repos/testasymmetry/born',Home));

% a bunch of useful variables and constants. also defining the global
% variable "ProblemSet" which we'll use to hold the BEM systems.
loadConstants
convertKJtoKcal = 1/joulesPerCalorie;
global UsefulConstants ProblemSet saveMemory writeLogfile logfileName
saveMemory = 0;
writeLogfile = 0;
logfileName = 'junklogfile';

allData = readtable('../all_Bondii_data.csv'); 

%%
%%
%COSMO Dispersion atom types
%all_atom_types = {'br','c-sp','c-sp2','c-sp3','cl',...
%                  'f','h','i','n-sp','n-sp3',...
%                  'n-sp2','o-sp2','o-sp3-h',...
%                  'o-sp2-n','o-sp3','p','s'};
              
%COSMO H-bond atom types
allHbondTypes = {'n_amine','n_amide','n_nitro',...
                 'n_other','o_carbonyl','o_ester',...
                 'o_nitro','o_hydroxyl','fluorine',...
                 'h_oh','h_nh','h_other'};
             
epsOutWater = 78.34;% from mnsol Database
epsIn  =  1;
epsOut = 12.85;%Wakai05 and Krossing06  ;Data_eps.Var2(14);
KelvinOffset = 273.15;
conv_factor = 332.112;
staticpotential = 0.0; % this only affects charged molecules;
kappa = 0.0;  % should be zero, meaning non-ionic solutions!

% the staticpotential below should not be used any more, please check
UsefulConstants = struct('epsIn',epsIn,'epsOut',epsOut,'kappa', ...
			 kappa,'conv_factor',conv_factor,...
			 'staticpotential',staticpotential);
%             'all_atom_types',all_atom_types);
 

training_set  = {'4_bromophenol', 'ethanamide', 'teflurane', '4_chloroaniline',...
            '2_methylpropane', '222_trifluoroethanol', '2_fluorophenol',...
            '2_iodopropane', 'iodobenzene', '1_nitropentane', '3_cyanophenol',...
            'pyridine','4_nitroaniline','14_dioxane','acetic_acid','butan_1_ol',...
            'methyl_acetate','propanone','triethyl_phosphate','trimethyl_phosphate',...
            'methanethiol','dimethyl_sulfate','piperidine','ethylamine','N_methylacetamide',...
            'nitromethane','nonanal','benzaldehyde','methanol',...
            '3_methyl_1h_indole','anthracene','124_trimethylbenzene','2_naphthylamine'...
            ,'4_formylpyridine','cyclohexylamine','dimethyl_sulfide','hex_1_ene',...
            'n_butanethiol','naphthalene','33_dimethylbutan_2_one','333_trimethoxypropionitrile',...
            'chloroethane','diethyl_sulfide','ethene','imidazole',...
            'methyl_octanoate','n_octane','n_propylbenzene',...
            'p_cresol','propanoic_acid','tetrahydropyran','trichloroethene',...
            '2_methoxyaniline','2_methylhexane','2_nitropropane','26_dimethylpyridine',...
            'benzene','but_1_ene','but_1_yne','m_xylene','methane',...
            'n_pentylamine','p_dibromobenzene'};
        
dG_list = allData.dG_expt; 
dG_disp_mob = allData.disp_mobley; 
dG_cav_mob = allData.cav_mobley; 
dG_np_mob = allData.np_mobley; 
dG_es_mob = allData.es_mobley; 
dG_np_SLIC = allData.np_SLIC; 
dG_es_SLIC = allData.es_SLIC; 
all_solutes = allData.solute;
mol_list = all_solutes;
solventAreas = allData{495,9:79};
solventATypes = allData{495,80:144};
solventHbData = allData{495,145:end};
solventVdWA = allData{495,11};
solventVdWV = allData{495,12};
soluteAreas = allData{:,9:79};
soluteATypes = allData{:,80:144};
soluteHbData = allData{:,145:end};
soluteVdWA = allData{:,11};
soluteVdWV = allData{:,12};
temperature = 24.85 + KelvinOffset;
curdir=pwd;

for i=1:length(training_set)
  dir=sprintf('%s/lab/projects/slic-jctc-mnsol/nlbc-mobley/nlbc_test/%s',dropbox_path,training_set{i});
  chdir(dir);
  pqrData = loadPqr('test.pqr');
  pqrAll{i} = pqrData;
  srfFile{i} = sprintf('%s/test_2.srf',dir);
  chargeDist{i} = pqrData.q;%chargeDistribution;
  foo = strcmp(mol_list,training_set{i});
  index = find(foo);
  if length(index) ~= 1
    fprintf('error finding refdata!\n');
    keyboard
  end
  soluteAtomAreas{i} = allData{index,9:79};
  soluteAtomTypes{i} = {allData{index,80:144}};
  soluteHbondData{i} = allData{index,145:end};
  referenceData{i} = dG_list(index);
  solute_VdWA{i} = allData{index,11};
  solute_VdWV{i} = allData{index,12};
  solventAtomAreas{i} = solventAreas;
  solventAtomTypes{i} = {solventATypes};
  solventHbondData{i} = solventHbData;
  solvent_VdWA{i} = solventVdWA;
  solvent_VdWV{i} = solventVdWV;
  atom_vols{i} = allData{index,14};
  temp{i} = temperature;
  newHB{i}=0;
  chdir(curdir);
  addProblemCosmo(training_set{i},pqrAll{i},srfFile{i},chargeDist{i},referenceData{i},...
                  soluteAtomAreas{i},soluteAtomTypes{i},soluteHbondData{i},...
                  solute_VdWV{i},solute_VdWA{i},...
                  solventAtomAreas{i},solventAtomTypes{i},solventHbondData{i},...
                  solvent_VdWV{i},solvent_VdWA{i},...
                  atom_vols{i},temp{i},newHB{i});
end


% The following script is specialized to this example.  We'll
% handle generating others.  Not complicated, but it's not self-explanatory.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



x0_1 = [0.5 -60 -0.5   -0.5*tanh(- -0.5)  0 ...
12512.94 9994.12  18125.74 30221.23 8107.53...
3490.35  0.02 16614.63 5688.16  37266.19 ...
24440.36 8637.81  13206.88 9391.39  19184.76... 
4631.93  20109.93 0.39 ...
0.5 .05 0.3 0.2 0.2 0.2 0.2 0.5 1 0.2 0.2 0.1 ...
3.18 0.79];

x0_2 = [0.5 -60 -0.5   -0.5*tanh(- -0.5)  0 ...
13092.88 10068.57 16721.79 26670.70 8650.29  ...
3788.71  16.50   17593.63 5629.09  33078.99 ...
23441.16 8513.40  13031.42 9167.81  18548.08 ...
2196.07 20203.69 0.37 ...
0.5 .05 0.3 0.2 0.2 0.2 0.2 0.5 1 0.2 0.2 0.1 ...
4.06 0.81];

x0_3 = [0.5 -60 -0.5   -0.5*tanh(- -0.5)  0 ...
12807.58 10654.56 18798.47 31558.97 8482.35  ...
3751.67  0.23 17195.61 5510.98 38834.23 25998.56... 
9007.07  13780.67 9700.03  20539.10 1552.22  ...
21381.02 0.40 ...
0.5 .05 0.3 0.2 0.2 0.2 0.2 0.5 1 0.2 0.2 0.1 ...
4.55 0.81];

x0_4 = [0.5 -60 -0.5   -0.5*tanh(- -0.5)  0 ...
19188.20 12977.25 18753.61 24056.13 12820.62 ...
7088.91  603.27  23839.44 9772.17  30765.56 ...
24893.92 10310.00 12967.66 11704.21 21113.67 ...
4496.35  22694.65 0.45 ...
0.5 .05 0.3 0.2 0.2 0.2 0.2 0.5 1 0.2 0.2 0.1 ...
6.55 0.95];

x0_5 = [0.5 -60 -0.5   -0.5*tanh(- -0.5)  0 ...
18519.47 13922.76 20784.38 29371.92 12515.88 ...
6645.42  302.10  23614.19 9390.90  35119.18 ...
26566.82 10388.39 14016.40 11645.71 21215.59 ...
10860.38 23922.32 0.44 ...
0.5 .05 0.3 0.2 0.2 0.2 0.2 0.5 1 0.2 0.2 0.1 ...
3.76 0.95];

x0=x0_1;

ub = [+2 +200 +100 +20  +0.1 ...
      1.1*x0(6) 1.1*x0(7) 1.1*x0(8) 1.1*x0(9) 1.1*x0(10) ...
      1.1*x0(11) 1.1*x0(12) 1.1*x0(13) 1.1*x0(14) 1.1*x0(15) ...
      1.1*x0(16) 1.1*x0(17) 1.1*x0(18) 1.1*x0(19) 1.1*x0(20) ...
      1.1*x0(21) 1.1*x0(22) 1.1*x0(23) 1.1*x0(24) ...
      2 2 2 2 2 2 2 2 2 2 2 2 ...
      1.1*x0(36) 1.1*x0(37)];

lb = [-2 -200 -100 -20  -0.1 ...
      0.9*x0(6) 0.9*x0(7) 0.9*x0(8) 0.9*x0(9) 0.9*x0(10) ...
      0.9*x0(11) 0.9*x0(12) 0.9*x0(13) 0.9*x0(14) 0.9*x0(15) ...
      0.9*x0(16) 0.9*x0(17) 0.9*x0(18) 0.9*x0(19) 0.9*x0(20) ...
      0.9*x0(21) 0.9*x0(22) 0.9*x0(23) 0.9*x0(24) ...
      0 0 0 0 0 0 0 0 0 0 0 0 ...
      0.9*x0(36) 0.9*x0(37)];


options = optimoptions('lsqnonlin','MaxIter',10);
options = optimoptions(options,'Display', 'iter');

y = @(x)ObjectiveFromBEMCosmo(x);
[x,resnorm,residual,exitflag,output,] = lsqnonlin(y,x0,lb,ub,options);
[err,calc,ref,es,np,hb,disp,disp_slsl,disp_svsl,disp_svsv,cav,comb]=ObjectiveFromBEMCosmo(x);
[err0,calc0,ref0,es0,np0,hb0,disp0,disp_slsl0,disp_svsl0,disp_svsv0,cav0,comb0]=ObjectiveFromBEMCosmo(x0);
[~,id]=ismember(training_set,mol_list);
disp_mob = allData.disp_mobley(id); 
cav_mob = allData.cav_mobley(id); 
np_mob = allData.np_mobley(id); 
es_mob = allData.es_mobley(id); 
np_SLIC = allData.np_SLIC(id); 
es_SLIC= allData.es_SLIC(id);
rmse = rms(calc-ref);
save('OptCosmoBondiiFinal_1.mat','x','training_set','mol_list','rmse','ref','calc','es','np','hb','disp',...
     'disp_slsl','disp_svsl','disp_svsv','comb','cav',...
     'disp_mob','cav_mob','np_mob','es_mob','np_SLIC',...
     'x0','calc0','es0','np0','hb0','disp0', 'disp_slsl0','disp_svsl0',...
     'disp_svsv0','comb0','cav0','epsOut');
