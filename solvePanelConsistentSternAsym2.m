function [phiReac, ...
    phiDiel1Bndy, dphiDnDiel1Bndy, phiDiel2Bndy, dphiDnDiel2Bndy, ...
    x, curA] = ...
    solvePanelConsistentSternAsym2(diel1SurfData, stern1SurfData, diel2SurfData, stern2SurfData, ...
    pqr1, pqr2, bem, epsIn1, epsIn2, epsOut, kappa, convFactor, ...
				  asymParams, asymBem)

picardIterLimit = 5;
maxGMRESIter = min(100, size(bem.A,1));
numDiel1Panels = length(diel1SurfData.areas);
numDiel2Panels = length(diel2SurfData.areas);
numStern1Panels = length(stern1SurfData.areas);
numStern2Panels = length(stern2SurfData.areas);
x = zeros(size(bem.A,1),1); 
rhs = bem.B * [pqr1.q; pqr2.q];

% initial guesses for Cauchy data.  We could use Coulomb field 
phiDiel1Bndy = x(1:numDiel1Panels);
dphiDnDiel1Bndy = x(numDiel1Panels+1:2*numDiel1Panels);
phiStern1Bndy = x(2*numDiel1Panels+1:2*numDiel1Panels+numStern1Panels);
dphiDnStern1Bndy = ones(numStern1Panels,1)*(-sum(pqr1.q)/ epsOut)/ ...
    sum(stern1SurfData.areas);
phiDiel2Bndy = x(2*(numDiel1Panels+numStern1Panels)+1:2*(numDiel1Panels+numStern1Panels)+numDiel2Panels);
dphiDnDiel2Bndy = x(2*(numDiel1Panels+numStern1Panels)+numDiel2Panels+1:2*(numDiel1Panels+numStern1Panels+numDiel2Panels));
phiStern2Bndy = x(2*(numDiel1Panels+numStern1Panels+numDiel2Panels)+1:2*(numDiel1Panels+numStern1Panels+numDiel2Panels)+numStern2Panels);
dphiDnStern2Bndy = ones(numStern2Panels,1)*(-sum(pqr2.q)/ epsOut)/ ...
    sum(stern2SurfData.areas);

for picardIter = 1:picardIterLimit
  if picardIter ==1
    [curA, curP] = calcPanelYoonSternAsymPert2(asymParams, asymBem, dielSurfData, sternSurfData, bem, ...
					      pqr1, epsIn1, pqr2, epsIn2, epsOut, kappa, ...
					      phiDiel1Bndy, dphiDnDiel1Bndy, ...
					      phiStern1Bndy, dphiDnStern1Bndy ,...
					      phiDiel2Bndy, dphiDnDiel2Bndy, ...
					      phiStern2Bndy, dphiDnStern2Bndy);
    [L,U]=lu(curP);
  else
    curA = calcPanelYoonSternAsymPert2(asymParams, asymBem, dielSurfData, sternSurfData, bem, ...
					      pqr1, epsIn1, pqr2, epsIn2, epsOut, kappa, ...
					      phiDiel1Bndy, dphiDnDiel1Bndy, ...
					      phiStern1Bndy, dphiDnStern1Bndy ,...
					      phiDiel2Bndy, dphiDnDiel2Bndy, ...
					      phiStern2Bndy, dphiDnStern2Bndy);
  end
  [x, flag, relres, iter, resvec] = gmres(curA, rhs, [], 1e-5, ...
					  maxGMRESIter, L,U,x);
  fprintf('took %d GMRES iters at picard iteration %d\n', max(iter), ...
	  picardIter)
  %  keyboard
  phiDiel1Bndy = x(1:numDiel1Panels);
  dphiDnDiel1Bndy = x(numDiel1Panels+1:2*numDiel1Panels);
  phiStern1Bndy = x(2*numDiel1Panels+1:2*numDiel1Panels+numStern1Panels);
  dphiDnStern1Bndy = x(2*numDiel1Panels+numStern1Panels+1:2*(numDiel1Panels+numStern1Panels));
  phiDiel2Bndy = x(2*(numDiel1Panels+numStern1Panels)+1:2*(numDiel1Panels+numStern1Panels)+numDiel2Panels);
  dphiDnDiel2Bndy = x(2*(numDiel1Panels+numStern1Panels)+numDiel2Panels+1:2*(numDiel1Panels+numStern1Panels+numDiel2Panels));
  phiStern2Bndy = x(2*(numDiel1Panels+numStern1Panels+numDiel2Panels)+1:2*(numDiel1Panels+numStern1Panels+numDiel2Panels)+numStern2Panels);
  dphiDnStern2Bndy = x(2*(numDiel1Panels+numStern1Panels+numDiel2Panels)+numStern2Panels+1:2*(numDiel1Panels+numStern1Panels+numDiel2Panels+numStern2Panels));
end

phiReac = convFactor * bem.C * x;